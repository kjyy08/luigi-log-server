name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  packages: write  # GHCR Docker 이미지 푸시에 필요

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 정적 분석을 위해 전체 히스토리 체크아웃

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
        continue-on-error: true  # 네트워크 이슈로 인한 실패 방지

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-strict-match: true

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Verify gradlew permissions
        run: ls -la gradlew

      - name: Clean build directory
        run: ./gradlew clean

      - name: Run tests with coverage
        run: |
          ./gradlew test \
            --parallel \
            --build-cache \
            --continue \
            --stacktrace
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Build project
        if: success() || failure()  # 테스트 실패 시에도 빌드 실행
        run: |
          chmod +x gradlew  # 권한 재확인
          ./gradlew assemble \
            --parallel \
            --build-cache \
            --stacktrace
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Generate test report
        if: always()  # 항상 테스트 리포트 생성
        run: |
          ./gradlew testReport --continue || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: (success() || failure()) && (hashFiles('**/build/reports/tests/**') != '' || hashFiles('**/build/test-results/**') != '')
        with:
          name: test-results
          path: |
            **/build/reports/tests/
            **/build/test-results/
          retention-days: 7

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts
          path: |
            **/build/libs/*.jar
            !**/build/libs/*-plain.jar
          retention-days: 30

      - name: Comment PR with test results
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && hashFiles('**/build/test-results/test/TEST-*.xml') != ''
        with:
          name: Gradle Tests
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run dependency vulnerability scan
        run: |
          ./gradlew dependencyCheckAnalyze --continue || true
        continue-on-error: true

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: dependency-check-report
          path: build/reports/
          retention-days: 7

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run code quality checks
        run: |
          ./gradlew check \
            --parallel \
            --build-cache \
            --continue
        continue-on-error: true
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: code-quality-reports
          path: |
            **/build/reports/
          retention-days: 7

  build-success:
    name: Build Success
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "🔍 빌드 결과 확인 중..."
          echo "테스트 결과: ${{ needs.test.result }}"
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ 테스트 단계 실패"
            exit 1
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ needs.security-scan.result }}" != "success" ] && [ "${{ needs.security-scan.result }}" != "skipped" ]; then
              echo "⚠️  보안 스캔에서 문제 발견 (계속 진행)"
            fi
            
            if [ "${{ needs.code-quality.result }}" != "success" ] && [ "${{ needs.code-quality.result }}" != "skipped" ]; then
              echo "⚠️  코드 품질 검사에서 문제 발견 (계속 진행)"
            fi
          fi
          
          echo "✅ CI 파이프라인 성공적으로 완료"

      - name: Update PR status
        if: github.event_name == 'pull_request'
        run: |
          echo "✅ 모든 CI 검사 통과 - 리뷰 준비 완료!"

  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 정적 분석을 위해 전체 히스토리 체크아웃

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-strict-match: true

      - name: Build Spring Boot JAR
        run: |
          ./gradlew :mains:monolith-main:bootJar \
            --parallel \
            --build-cache \
            --stacktrace
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            # latest 태그를 main 브랜치에만 설정
            type=raw,value=latest,enable={{is_default_branch}}
            # 브랜치 이름 기반 태그
            type=ref,event=branch
            # Git SHA 기반 태그
            type=sha,prefix={{branch}}-
            # 날짜 기반 태그
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=Luigi Log Server
            org.opencontainers.image.description=개인 기술 블로그 플랫폼
            org.opencontainers.image.vendor=Luigi99
            org.opencontainers.image.version={{version}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment status
        run: |
          echo "🐳 Docker 이미지 빌드 및 푸시 완료"
          echo "📦 이미지: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Registry: https://github.com/${{ github.repository }}/pkgs/container/luigi-log-server"