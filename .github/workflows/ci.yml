name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with coverage
        run: |
          ./gradlew test koverXmlReport \
            --parallel \
            --build-cache \
            --continue \
            --stacktrace
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-and-coverage-results
          path: |
            **/build/reports/tests/
            **/build/test-results/
            build/reports/kover/
          retention-days: 7

      - name: Comment PR with test results
        uses: dorny/test-reporter@v2
        if: github.event_name == 'pull_request' && !cancelled()
        with:
          name: Test Results
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false
          fail-on-empty: false

      - name: Add coverage report to PR
        uses: mi-kas/kover-report@v1.9
        if: github.event_name == 'pull_request' && !cancelled()
        with:
          path: ${{ github.workspace }}/build/reports/kover/coverage.xml
          title: "📊 Luigi Log Server - Kover 테스트 커버리지 리포트"
          update-comment: true
          min-coverage-overall: 40
          min-coverage-changed-files: 60
          coverage-counter-type: LINE

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate coverage report for SonarQube
        run: |
          ./gradlew koverXmlReport
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar-

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  workflow-success:
    name: Workflow Success
    runs-on: ubuntu-latest
    needs: [test, sonar]
    if: always()
    
    steps:
      - name: Check workflow status
        run: |
          echo "🔍 Workflow Status Check"
          echo "Test: ${{ needs.test.result }}"
          echo "SonarQube: ${{ needs.sonar.result }}"
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ needs.sonar.result }}" == "failure" ]; then
              echo "❌ SonarQube quality gate failed"
              exit 1
            fi
          fi
          
          echo "✅ All checks passed"

  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # 정적 분석을 위해 전체 히스토리 체크아웃

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            # latest 태그를 main 브랜치에만 설정
            type=raw,value=latest,enable={{is_default_branch}}
            # 브랜치 이름 기반 태그
            type=ref,event=branch
            # Git SHA 기반 태그
            type=sha,prefix={{branch}}-
            # 날짜 기반 태그
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=Luigi Log Server
            org.opencontainers.image.description=개인 기술 블로그 플랫폼
            org.opencontainers.image.vendor=Luigi99
            org.opencontainers.image.version={{version}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment status
        run: |
          echo "🐳 Docker 이미지 빌드 및 푸시 완료"
          echo "📦 이미지: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Registry: https://github.com/${{ github.repository }}/pkgs/container/luigi-log-server"