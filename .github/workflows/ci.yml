name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: write
  packages: write

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests with coverage
        run: |
          ./gradlew test koverXmlReport koverHtmlReport koverVerify \
            --parallel \
            --build-cache \
            --continue \
            --stacktrace
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Upload test results and coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-and-coverage-results
          path: |
            **/build/reports/tests/
            **/build/test-results/
            build/reports/kover/
          retention-days: 7

      - name: Comment PR with test results
        uses: dorny/test-reporter@v2
        if: github.event_name == 'pull_request' && !cancelled()
        with:
          name: Test Results
          path: '**/build/test-results/test/TEST-*.xml'
          reporter: java-junit
          fail-on-error: false
          fail-on-empty: false

      - name: Generate coverage summary
        if: github.event_name == 'pull_request' && !cancelled()
        run: |
          if [ -f "build/reports/kover/coverage.xml" ]; then
            echo "COVERAGE_ENABLED=true" >> $GITHUB_ENV
            
            # Kover XML에서 커버리지 정보 추출 (마지막 counter가 전체 요약)
            LINE_MISSED=$(grep '<counter type="LINE"' build/reports/kover/coverage.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/' || echo "0")
            LINE_COVERED=$(grep '<counter type="LINE"' build/reports/kover/coverage.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/' || echo "0")
            BRANCH_MISSED=$(grep '<counter type="BRANCH"' build/reports/kover/coverage.xml | tail -1 | sed 's/.*missed="\([0-9]*\)".*/\1/' || echo "0")
            BRANCH_COVERED=$(grep '<counter type="BRANCH"' build/reports/kover/coverage.xml | tail -1 | sed 's/.*covered="\([0-9]*\)".*/\1/' || echo "0")
            
            # 커버리지 비율 계산 (bash 산술 연산 사용)
            LINE_TOTAL=$((LINE_MISSED + LINE_COVERED))
            BRANCH_TOTAL=$((BRANCH_MISSED + BRANCH_COVERED))
            
            if [ "$LINE_TOTAL" -gt 0 ]; then
              LINE_PCT=$((LINE_COVERED * 100 / LINE_TOTAL))
            else
              LINE_PCT=0
            fi
            
            if [ "$BRANCH_TOTAL" -gt 0 ]; then
              BRANCH_PCT=$((BRANCH_COVERED * 100 / BRANCH_TOTAL))
            else
              BRANCH_PCT=0
            fi
            
            echo "LINE_COVERAGE=$LINE_PCT" >> $GITHUB_ENV
            echo "BRANCH_COVERAGE=$BRANCH_PCT" >> $GITHUB_ENV
            
            echo "📊 커버리지 정보 추출 완료:"
            echo "- Line Coverage: $LINE_PCT% ($LINE_COVERED/$LINE_TOTAL)"
            echo "- Branch Coverage: $BRANCH_PCT% ($BRANCH_COVERED/$BRANCH_TOTAL)"
          else
            echo "COVERAGE_ENABLED=false" >> $GITHUB_ENV
            echo "⚠️ 커버리지 리포트를 찾을 수 없습니다."
          fi

      - name: Comment PR with coverage
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && !cancelled() && env.COVERAGE_ENABLED == 'true'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lineCoverage = process.env.LINE_COVERAGE;
            const branchCoverage = process.env.BRANCH_COVERAGE;
            
            const comment = `## 📊 테스트 커버리지 리포트

            ### 커버리지 결과
            - **라인 커버리지**: ${lineCoverage}%
            - **브랜치 커버리지**: ${branchCoverage}%

            ### 커버리지 분석
            ${lineCoverage >= 40 ? '✅' : '❌'} 라인 커버리지 임계값 (40% 이상)
            ${branchCoverage >= 35 ? '✅' : '❌'} 브랜치 커버리지 임계값 (35% 이상)

            ### 📁 상세 리포트
            - HTML 리포트는 CI Artifacts에서 다운로드 가능합니다.
            - XML 리포트는 SonarQube 분석에서 활용됩니다.

            ---
            🤖 *Luigi Log Server - Kover 테스트 커버리지 리포트*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Generate coverage report for SonarQube
        run: |
          ./gradlew koverXmlReport
        env:
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Xmx2g"

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar-

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  workflow-success:
    name: Workflow Success
    runs-on: ubuntu-latest
    needs: [test, sonar]
    if: always()
    
    steps:
      - name: Check workflow status
        run: |
          echo "🔍 Workflow Status Check"
          echo "Test: ${{ needs.test.result }}"
          echo "SonarQube: ${{ needs.sonar.result }}"
          
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "❌ Tests failed"
            exit 1
          fi
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ needs.sonar.result }}" == "failure" ]; then
              echo "❌ SonarQube quality gate failed"
              exit 1
            fi
          fi
          
          echo "✅ All checks passed"

  docker-build-push:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # 정적 분석을 위해 전체 히스토리 체크아웃

      - name: Apply CI gradle.properties
        run: |
          mkdir -p ~/.gradle
          cp .github/workflows/gradle.properties ~/.gradle/gradle.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.event_name == 'pull_request' }}
          gradle-version: 8.14.3

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            # latest 태그를 main 브랜치에만 설정
            type=raw,value=latest,enable={{is_default_branch}}
            # 브랜치 이름 기반 태그
            type=ref,event=branch
            # Git SHA 기반 태그
            type=sha,prefix={{branch}}-
            # 날짜 기반 태그
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          labels: |
            org.opencontainers.image.title=Luigi Log Server
            org.opencontainers.image.description=개인 기술 블로그 플랫폼
            org.opencontainers.image.vendor=Luigi99
            org.opencontainers.image.version={{version}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment status
        run: |
          echo "🐳 Docker 이미지 빌드 및 푸시 완료"
          echo "📦 이미지: ${{ steps.meta.outputs.tags }}"
          echo "🔗 Registry: https://github.com/${{ github.repository }}/pkgs/container/luigi-log-server"